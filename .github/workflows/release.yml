name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  # Build Job: Compiles the binaries
  build:
    runs-on: ubuntu-latest
    outputs:
      release_dir: ${{ steps.set_release_dir.outputs.release_dir }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.4'

      - name: Build Binaries
        id: build_binaries
        run: |
          mkdir -p dist
          go build -o dist/fmsh cmd/main.go

      - name: Set Output Directory
        id: set_release_dir
        run: echo "::set-output name=release_dir::dist"

  # Package and Release Job: Packages and releases artifacts
  package_and_release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.4'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare APT Repository
        run: |
          mkdir -p apt-repo/dists/stable/main/binary-amd64
          mkdir -p apt-repo/dists/stable/main/binary-arm64

          for file in dist/*.deb; do
            arch=$(dpkg --info "$file" | grep Architecture | awk '{print $2}')
            if [ "$arch" = "amd64" ]; then
              cp "$file" apt-repo/dists/stable/main/binary-amd64/
            elif [ "$arch" = "arm64" ]; then
              cp "$file" apt-repo/dists/stable/main/binary-arm64/
            fi
          done

          cd apt-repo/dists/stable/main/binary-amd64
          dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz
          cd ../binary-arm64
          dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz
          cd ../../../../../

      - name: Generate Release File
        run: |
          cat <<EOF > apt-repo/dists/stable/Release
          Origin: fmsh
          Label: fmsh
          Suite: stable
          Codename: stable
          Architectures: amd64 arm64
          Components: main
          Description: APT repository for fmsh
          EOF

      - name: Publish APT Repository to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./apt-repo
          publish_branch: gh-pages

  # Verify Job: Verifies Linux and macOS releases
  verify:
    runs-on: ubuntu-latest
    needs: package_and_release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Verify Linux Package Installation
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Testing Linux .deb packages..."
          sudo apt-get update
          sudo apt-get install -y ./dist/fmsh_*.deb
          fmsh --version

      - name: Verify Homebrew Formula
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Verifying Homebrew formula..."
          cat dist/homebrew/fmsh.rb

      - name: Verify macOS Binary
        if: matrix.os == 'macos-latest'
        run: |
          echo "Testing macOS binaries..."
          tar -xvf dist/fmsh_*.tar.gz -C /tmp
          /tmp/fmsh --version
